<snippet>
  <description>New class component - container component - typescript</description>
<content><![CDATA[
/************************************** THIRD-PARTY IMPORTS ***************************************/
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { inject } from 'mobx-react';
import { PolyglotProps } from 'mad-utils/lib/browser';

const cn = require('classnames');

//**************************************** PROJECT IMPORTS ****************************************/
import { ${TM_FILENAME/([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?\-container\..*/\U$1\L$2\U$3\L$4\U$5\L$6\U$7\L$8\U$9\L$10\U$11\L$12/g}View } from './${TM_FILENAME/(.+?)(\-container\.tsx)/\1/g}-view';

/******************************************** LOGGING *********************************************/
import { logFactory, logMarkers } from 'mad-logs';
const log = logFactory()(`${TM_FILENAME}`, logMarkers.zebra);

/**************************************** TYPE DEFINITIONS ****************************************/
interface ${1}Props extends PolyglotProps {}
interface ${1}State extends {}


/********************************************* EXPORT *********************************************/
/**
 * @export ${1} - ${2:DESCRIPTION}
 */
@inject('polyglot', 'appState')
export class ${1:${TM_FILENAME/([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?\..*/\U$1\L$2\U$3\L$4\U$5\L$6\U$7\L$8\U$9\L$10\U$11\L$12/g}} extends React.Component<${1}Props, ${1}State> {
    ${3:state = { \}}${3/.+/\n\n    /}${4:events = {
        inputChange: (event: React.FormEvent<HTMLInputElement>) => {
            log.info(`inputChange :: event.target['value']:`, event.target['value']);
        \},
        submitForm: (event: React.FormEvent<HTMLFormElement>) => {
            log.info(`submitForm :: event:`, event);
        \},
    \}}${4/.+/\n\n    /}render() {
        log.verbose(`Rendering ${1} with this.props:`, this.props);
        ${0}
        return (
            <${TM_FILENAME/([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?[-_]?[-_]?([a-zA-Z])?([a-zA-Z0-9]+)?\-container\..*/\U$1\L$2\U$3\L$4\U$5\L$6\U$7\L$8\U$9\L$10\U$11\L$12/g}View events={this.events} />
        )
    }
};

]]></content>  
  <tabTrigger>rct_ts_new_class_container</tabTrigger>
  <scope>source.tsx</scope>
</snippet>
