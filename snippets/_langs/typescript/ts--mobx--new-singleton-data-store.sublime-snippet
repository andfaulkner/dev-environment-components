<snippet>
  <description>Create a new singleton data store that uses Javelinscript</description>
<content><![CDATA[
/******************************************** IMPORTS *********************************************/
import {loadJavelinscript} from './util/javelinscript-loader';
import {buildJavelinscript, JavelinInstance, Types,
         buildJavelinscriptWithCustomConfig} from '@ottawamhealth/canimmunize-javelinscript';

import * as moment from 'moment';
import {observable, computed, autorun, action} from 'mobx';
import {observer, inject} from 'mobx-react';

/******************************************** LOGGING *********************************************/
import {logFactory, logMarkers} from 'mad-logs';
const log = logFactory()('name-store.ts', logMarkers.nightmare);

/********************************************* STORE **********************************************/
/**
 * @export ${1:NameStore}
 * @singleton
 */
class ${1:NameStore} {
    // Stores single allowed ${1:NameStore} instance
    private static _instance: ${1:NameStore};
    @observable private _javelinscript: JavelinInstance;

    /**
     * @constructor
     * Factory method (The true constructor)
     */
    static new = (): ${1:NameStore} => {
        if (!${1:NameStore}._instance) {
            ${1:NameStore}._instance = new ${1:NameStore}();
            log.verbose(`${1:NameStore} created: `, ${1:NameStore}._instance);
        }        return ${1:NameStore}._instance;
    }
    private constructor() { this._javelinscript = loadJavelinscript() }
}
]]></content>  
  <tabTrigger>mobx_new_store_w_javelinscript</tabTrigger>
  <scope>source.js, source.ts, source.jsx, source.tsx</scope>
</snippet>