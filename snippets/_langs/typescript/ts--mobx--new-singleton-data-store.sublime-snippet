<snippet>
  <description>Create a new singleton data store that uses Javelinscript</description>
<content><![CDATA[
/******************************************** IMPORTS *********************************************/
import { loadJavelinscript } from './util/javelinscript-loader';
import { buildJavelinscript, JavelinInstance, Types,
         buildJavelinscriptWithCustomConfig } from '@ottawamhealth/canimmunize-javelinscript';

import * as moment from 'moment';
import { observable, computed, autorun, action } from 'mobx';
import { observer, inject } from 'mobx-react';

import autobind from 'autobind-decorator';

/******************************************** LOGGING *********************************************/
import { logFactory, logMarkers } from 'mad-logs';
const log = logFactory()('name-store.ts', logMarkers.nightmare);

/********************************************* STORE **********************************************/
/**
 * @export NameStore
 * @singleton
 */
@autobind
class NameStore {
    // Stores single allowed NameStore instance
    private static _instance: NameStore;
    @observable private _javelinscript: JavelinInstance;

    /**
     * @constructor
     * Factory method (The true constructor)
     */
    static new = (): NameStore => {
        if (!NameStore._instance) {
            NameStore._instance = new NameStore();
            log.verbose(`NameStore created: `, NameStore._instance);
        }        return NameStore._instance;
    }
    private constructor() { this._javelinscript = loadJavelinscript() }

}
]]></content>  
  <tabTrigger>mobx_new_store_w_javelinscript</tabTrigger>
  <scope>source.js, source.ts, source.jsx, source.tsx</scope>
</snippet>