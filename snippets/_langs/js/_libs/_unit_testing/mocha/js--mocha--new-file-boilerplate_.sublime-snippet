<snippet>
  <description>Skeleton of a new Mocha test file</description>
<content><![CDATA[
// ensure environment knows testing is occurring
process.env.mocha === true;

// Store original process.argv
const oldProcArgs = Object.assign({}, process.argv);

/************************************** THIRD-PARTY IMPORTS ***************************************/
// Testing modules
import 'mocha';
import * as sinon from 'sinon';
import { expect } from 'chai';
import { stderr, stdout }  from 'test-console';

// Utility modules
import * as fs from 'fs';
import * as path from 'path';
import { inspect } from 'util';

// spawn other apps
import { spawn, spawnSync, fork } from 'child_process';
const spawnSyncOpts = { detached: true, env: process.env, stdio: 'inherit' };

/************************************ IMPORT FILE TO BE TESTED ************************************/
import { ${2:vars}${3/.+/, /}${3:toImport}${4/.+/, /}${4:forTesting} } from ${1:'./file-containing-modules-to-test'};

/********************************************* TESTS **********************************************/
describe('${2/^([^,]+).*/$1/}', function() {
    it('exists', function() {
        expect(${2/^([^,]+).*/$1/}).to.exist;
    });
    ${0}
});
${3/.+/\ndescribe\('/}${3:${2/^[^,]+,\s?([^,]+).*/$1/}}${3/.+/', function\(\) {\n    it\('exists', function\(\) {\n        expect\(/}${3/^[^,]+,\s?([^,]+).*/$1/}${3/.+/\).to.exist;\n    \}\);\n\n\}\);\n/}${__________________________________________________________}${4/.+/\ndescribe\('/}${4:${2/^[^,]+,\s?([^,]+).*/$1/}}${4/.+/', function\(\) {\n    it\('exists', function\(\) {\n        expect\(/}${4/^[^,]+,\s?([^,]+).*/$1/}${4/.+/\).to.exist;\n    \}\);\n\n\}\);\n/}
// Restore original process.argv
process.argv = Object.assign({}, oldProcArgs);

]]></content>  
  <tabTrigger>mocha_new_file_boiler</tabTrigger>
  <scope>source.js, source.ts, source.jsx, source.tsx</scope>
</snippet>