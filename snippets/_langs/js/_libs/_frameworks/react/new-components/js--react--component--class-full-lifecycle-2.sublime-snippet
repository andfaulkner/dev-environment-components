<snippet>
  <description>New class-based React component w all lifecycle methods</description>
<content><![CDATA[
interface ${1}Props {}
interface ${1}State {}

class ${1:${TM_FILENAME/(.+)\..+|.*/$1/:name}} extends React.Component<${1}Props, ${1}State> {

  static defaultProps = {
    // color: 'red',
    // cellWidth: 90
  }

  state = {
    // define: 'initial "state" values here',
    // qty: this.props.initialQty,
    // total: 0
  }

  constructor(props) {
    super(props);
    // bind new functions to 'this' here e.g.
    //    this.tick.bind(this);
  }

  shouldComponentUpdate(nextProps, nextState) {
    // new props or state received, not yet rendered. If it returns false, no rerender occurs.
  }

  componentWillReceiveProps(nextProps) {
    // props received, but not yet rendered in. DOES NOT OCCUR ON MOUNT, ONLY ON UPDATE.
  }

  componentWillUpdate(nextProps, nextState) {
    // actions to do right before the component updates
  }

  componentWillMount() {
    // actions to do right before the component initially mounts (but not on updates)
  }

  update() {
    // actual update action occurs here
  }

  render() {
    return (
      <div>
        ${0}
      </div>
    )
  }
}
]]></content>  
  <tabTrigger>rct_new_class_full_lifecycle</tabTrigger>
  <scope>source.js, source.ts, source.jsx, source.tsx</scope>
</snippet>
