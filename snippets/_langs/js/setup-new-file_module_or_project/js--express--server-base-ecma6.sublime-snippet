<snippet>
    <!-- Regex to find all instances of "p." not preceded by a character -->
    <content><![CDATA[
//************************************* GLOBAL NODE MODULES ***************************************/
//Fix root path referenced by require
require('rootpath')();

//Determine and store project root path
var path = require('path');
global.__projrootdir = path.join(process.mainModule.filename, '..');

//Ensure infinite number of concurrent sockets can be open
var http = require('http');
http.globalAgent.maxSockets = Infinity;

//******************************************** CONFIG *********************************************/
// get app settings
var config = require('config/default');

//***************************************** ECMA6 SETUP *******************************************/
//ECMA 6 polyfill modules
require('harmonize')(); // ensure es6 works
require('babel/register');
require('babel/polyfill');

//unpolyfillable function patched with a "close-enough" behaviour
Object.getPrototypeOf.toString = function objToStringPolyfill() {
    return Object.toString();
};

//**************************************** ERROR HANDLING *****************************************/
if (process.env.NODE_ENV !== 'production') {
    Error.stackTraceLimit = Infinity;
    require('trace'); // active long stack trace
    require('clarify'); // Exclude node internal calls from the stack
}

//** Error handling module(s) here **/
//var log = require('server/debug/winston-logger');
//require('server/debug/uncaught-error-handler');

//******************************************** SERVER *********************************************/
var express = require('express');

var app = express()

    /* MIDDLEWARES GO HERE - EXAMPLES DIRECTLY BELOW */
    .use('/', express.static(path.join(__dirname, '.build/client')))
    ${1:.use('/api', restAPIRouter)}

    //Build Express app itself (loads & runs a constructor module), serve over web
    .listen(config.port.server, function startServer() {
        log.info('Server running: http://127.0.0.1:' + config.port.server + '/');
        log.info('Server process id (pid): ' + process.pid); //emit process ID
        return log.info('Wow. So server. Very running. Much bootup success. Such win.\n');
    });

${0}
//Remaining requirements for this to work:
// -- npm install rootpath babel harmonize trace clarify express --save
// -- config/default.js file that emits an object literal with props:
//          server.port, __projrootdir, consoleLogLevel, & appName props, etc.
//          -- a good __projrootdir value:: path.join(__dirname, '..')
//          -- try using proj_config_starting_point snippet for basics
// -- client directory, containing html etc.
// -- build mechanism to get contents of client files into .build
//      -- probably Gulp and/or Webpack
// -- add a logging module - tie it to variable 'log'.
]]></content>
    <tabTrigger>express_server_base_ecma6</tabTrigger>
    <scope>source.js, source.ts, source.jsx, source.tsx</scope>
</snippet>
