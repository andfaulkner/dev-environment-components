%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: npm package.json
file_extensions:
  - package.json
scope: source.npm
contexts:
  main:
    - include: top_level_object
  array:
    - match: '\['
      captures:
        0: punctuation.definition.array.begin.json
      push:
        - meta_scope: meta.structure.array.json
        - match: '\]'
          captures:
            0: punctuation.definition.array.end.json
          pop: true
        - include: value
        - match: ","
          scope: punctuation.separator.array.json
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-array-separator.json
  comments:
    - match: /\*\*
      captures:
        0: punctuation.definition.comment.json
      push:
        - meta_scope: comment.block.documentation.json
        - match: \*/
          captures:
            0: punctuation.definition.comment.json
          pop: true
    - match: /\*
      captures:
        0: punctuation.definition.comment.json
      push:
        - meta_scope: comment.block.json
        - match: \*/
          captures:
            0: punctuation.definition.comment.json
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.json
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.json
  number:
    - match: |-
        (?x)        # turn on extended mode
        -?        # an optional minus
        (?:
          0       # a zero
          |       # ...or...
          [1-9]   # a 1-9 character
          \d*     # followed by zero or more digits
        )
        (?:
          (?:
            \.    # a period
            \d+   # followed by one or more digits
          )?
          (?:
            [eE]  # an e character
            [+-]? # followed by an option +/-
            \d+   # followed by one or more digits
          )?      # make exponent optional
        )?        # make decimal portion optional
      scope: constant.numeric.json

  top_level_object:
    - meta_scope: source.npm
    - match: '\{'
      captures:
        0: punctuation.definition.toplvl-dictionary.begin.json
      push:
        - meta_scope: meta.structure.toplvl-dictionary.json
        - match: '\}'
          captures:
            0: punctuation.definition.toplvl-dictionary.end.json
          pop: true
        # - include: scripts_object
        - include: string
        - include: comments
        - match: ":"
          captures:
            0: punctuation.separator.toplvl-dictionary.key-value.json
          push:
            - meta_scope: meta.structure.toplvl-dictionary.value.json
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.toplvl-dictionary.pair.json
              pop: true
            - include: value
            - match: '[^\s,]'
              scope: invalid.illegal.expected-toplvl-dictionary-separator.json

  # scripts_object:
  #   - match: '"scripts"'
  #     captures:
  #       0: punctuation.definition.scripts-dictionary.start.json
  #     push:
  #       - meta_scope: meta.structure.scripts-dictionary.json
  #       - match: '\}'
  #         captures:
  #           0: punctuation.definition.scripts-dictionary.end.json
  #         pop: true
  #       - include: string
  #       - include: comments
  #       - match: ":"
  #         captures:
  #           0: punctuation.separator.scripts-dictionary.key-value.json
  #         push:
  #           - meta_scope: meta.structure.scripts-dictionary.value.json
  #           - match: '(,)|(?=\})'
  #             captures:
  #               1: punctuation.separator.scripts-dictionary.pair.json
  #             pop: true
  #           - include: object
  #           - match: '[^\s,]'
  #             scope: invalid.illegal.expected-scripts-dictionary-separator.json
  #       - match: '[^\s\}]'
  #         scope: invalid.illegal.expected-scripts-dictionary-separator.json

  object:
    - match: '\{'
      captures:
        0: punctuation.definition.dictionary.begin.json
      push:
        - meta_scope: meta.structure.dictionary.json
        - match: '\}'
          captures:
            0: punctuation.definition.dictionary.end.json
          pop: true
        - include: string
        - include: comments
        - match: ":"
          captures:
            0: punctuation.separator.dictionary.key-value.json
          push:
            - meta_scope: meta.structure.dictionary.value.json
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.json
              pop: true
            - include: value
            - match: '[^\s,]'
              scope: invalid.illegal.expected-dictionary-separator.json
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-dictionary-separator.json

  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.json
      push:
        - meta_scope: string.quoted.double.json
        - match: '"'
          captures:
            0: punctuation.definition.string.end.json
          pop: true
        - match: |-
            (?x)                # turn on extended mode
            \\                # a literal backslash
            (?:               # ...followed by...
              ["\\/bfnrt]     # one of these characters
              |               # ...or...
              u               # a u
              [0-9a-fA-F]{4}) # and four hex digits
          scope: constant.character.escape.json
        - match: \\.
          scope: invalid.illegal.unrecognized-string-escape.json
  value:
    - include: constant
    - include: number
    - include: string
    - include: array
    - include: object
    - include: comments
