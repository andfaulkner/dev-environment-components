#!/usr/bin/env ruby
# encoding: utf-8

#**************************************************************************************************#
# 
#    Small utility to replace and/or insert text into files.
#    Should run with Ruby 2.0.0+.
#
#    For more information, run the script with no arguments, or with --help.
#
#**************************************************************************************************#

require 'fileutils'

#**************************************************************************************************#
# 
# Handle CLI arguments
#   --before
#   --after
#   --replace
#   --wildside (no backup)
#   --help
# 
class Arguments
  attr_reader :args

  def initialize(args)
    @args = args                                                     # provide args from cli
    %w(wildside before after replace).each {|var| define_var(var) }  # dynamically define vars
    @after = true if !@before && !@after && !@replace                # inject after is the default
  end

  def valid_input
    @args.size < 3 || (@before && @after && @replace) || @args[0..2].find_index('--help')
  end

  def method_missing(method_name, *arguments, &_block)
    instance_variable_set("@#{method_name.to_s.chop}", arguments[0]) if method_name.to_s =~ /=$/
  end

  private

    def define_var(arg)
      if (does_match = @args[0..3].find_index("--#{arg}"))
        instance_variable_set("@#{arg}", !!@args.slice!(does_match))   # remove inject before arg
      end
      self.class.class_eval("attr_reader :#{arg}")                     # define new readable var
    end
end

# help text for inject_at_match
module UsageInfo
  def self.usage_section
    puts '-----------------------------------------------------------------------------'
    puts 'USAGE:        tir filename [opts] regex text'
    puts '------------------------------------------------'
  end

  def self.definition_section
    puts ' injects given text into a file before or after all lines that partially or'
    puts ' fully match a given "matcher" string or regex. Can also replace matching text.'
    puts '------------------------------------------------'
  end

  def self.arguments_section
    puts 'ARGUMENTS:'
    puts 'filename:     path to file to modify'
    puts 'regex:        '
    puts 'text:         text to inject into file'
    puts '------------------------------------------------'
  end

  def self.options_section
    puts 'OPTIONS:'
    puts '  --before    inject before match'
    puts '  --after     inject after match'
    puts '  --replace   replace match'
    puts '  --wildside  create no backup'
    puts '  --help      display this help text'
    puts '------------------------------------------------'
  end

  def self.example_section
    puts 'EXAMPLE:  inject_at_match asdf.txt --after "kittens" "puppies"'
    puts '  Output: '
    puts '             ORIGINAL TEXT   |  NEW TEXT'
    puts '             ----------------+----------------'
    puts '                asdf         |  asdf'
    puts '                kittens      |  kittens'
    puts '                asdf         |  puppies'
    puts '                             |  asdf'
    puts ''
    puts 'EXAMPLE 2: inject_at_match asdf.txt --before "^[^a-zA-Z0-9_]+gem.?{1,4}binding.*" "#binds to things"'
    puts '-----------------------------------------------------------------------------'
  end

  def self.usage
    usage_section
    definition_section
    arguments_section
    options_section
    example_section
  end
end

# inject text at matching location
module InjectAtMatch
  def self.inject(filename, pattern, new_text, options)
    bk_filename = backup_original_file filename

    newfile = create_newfile_with_injection bk_filename, pattern, new_text, options

    show_output newfile, options

    File.new(filename, 'w+').write newfile.join ''
    File.delete bk_filename if options[:wildside]
  end

  def self.backup_original_file(filename)
    bk_filename = "#{filename}__bk"
    FileUtils.mv(filename, bk_filename) # COPY ORIGINAL FILE TO BACKUP
    bk_filename
  end

  def self.create_newfile_with_injection(bk_filename, pattern, new_text, options)
    newfile = []
    File.open(bk_filename, 'r').each_line {|line|
      matcher = line.match pattern
      if options[:before]
        newfile << "#{new_text}\n" if matcher
        newfile << line
      elsif options[:replace]
        newfile << (matcher ? "#{ matcher.pre_match }#{ new_text }#{ matcher.post_match }" : line)
      else
        newfile << line
        newfile << "#{new_text}\n" if matcher
      end
    }.close
    newfile
  end

  def self.show_output(newfile, options)
    unless options[:no_output]
      puts "OUTPUT\n-------"
      puts newfile
    end
  end
end

################################## RUN IF EXECUTING AS CLI TOOL ##################################
if __FILE__ == $PROGRAM_NAME
  # prep CLI args for public InjectAtMatch::inject method
  def __inject__(arguments)
    # note: treats all text after first 2 args as replacement text
    InjectAtMatch.inject arguments.args[0], arguments.args[1], arguments.args.drop(2).join(' '),
                         before:   arguments.before,
                         replace:  arguments.replace,
                         wildside: arguments.wildside
  end

  arguments = Arguments.new ARGV

  # Show help text
  if arguments.valid_input
    UsageInfo.usage
  else
    # Extract individual arguments from raw command line params (ARGUMENTS.new ARGV)
    __inject__ arguments
  end
##################################################################################################

##################### IMPORTED LIBRARY MESSAGE, IF NOT EXECUTING AS CLI TOOL #####################
else
  puts 'inject_at_match imported'
end
