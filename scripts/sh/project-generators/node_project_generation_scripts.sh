echo "Project generation scripts loading..."

####################################################################################################
#                                   NODE PROJECT GENERATION SCRIPTS                                #
####################################################################################################

# Import external Node project generation scripts
source "$SNIPPETS_DIR/scripts/sh/project-generators/build_sublime-project_file.sh"

####################################################################################################
############################################ NEW FILES #############################################
####################################################################################################
function newnode__babel_base {
  cat > .babelrc <<- BABELCONFIG
{
    "presets": ["es2015", "react"]
}
BABELCONFIG
}


function newnode__postgres_base_install_in_proj {
    createdb --user postgres $1
    echo "new database named $1 created"
}

function newnode__webpack {
      cat > ./config/webpack/webpack.config.js <<- WEBPACKCONFIG
module.exports = {
  context: __dirname + "/BASE_DIRECTORY_FOR_RESOLVING_ENTRY",
  entry: "ENTRY_POINT_FOR_BUNDLE.js -- OR ['entry1.js', 'entry2.js']",
  output: {
    path: __dirname + "",
    filename: "INSERT_OUTPUT_FILE_NAME.js"
  }
}
WEBPACKCONFIG
}

function newnode__mocha_base_install_in_proj {
    npm install --save-dev mocha chai
    mocha init test
    mkdir test
    mv test/tests.js test/test.js
    cp "$TEMPLATES_DIR/mochatestbase.js" "$PWD/test/test.js"
    echo "Mocha test run - ensuring install succeeded:"
    mocha
}

function newnode__default_eslint {
    cp "$TEMPLATES_DIR/.eslintrc" "$PWD/.eslintrc"
    echo "default .eslintrc created!"
}

function newnode__babel_config_base {
    cat > .babelrc <<- BABELCONFIG
{
    "presets": ["es2015"]
}
BABELCONFIG
}

##### CREATE BABELRC FILE WITH REACT PRESET INCLUDED
function newnode__babel_config_base_react {
    cat > .babelrc <<- BABELCONFIG
{
    "presets": ["es2015", "react"]
}
BABELCONFIG
}


function newnode__gitignore_base {
    echo "About to create .gitignore file at project base, with sane default settings for NodeJS"
    cat > .gitignore <<-GITIGNORE_FILE_CONTENTS
.DS_Store

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# IDE history storage
.history/**

# temporary files folder
temp/
temp/**
!/*/**/*temp*

**/cache/**

# vim swapfile
*.swp

# backups
.bk

# local Sublime files
*.sublime-workspace
*.sublime-project

# exclude anything that received the _OLD file suffix
**/doc/**_OLD/**
**/*_OLD/

# personal 'recycle bin' for code
**/doc/old_code/**
doc/old_code

# exclude local notes
doc/local_notes

.vscode
.awcache
GITIGNORE_FILE_CONTENTS

    echo '.gitignore file created'
}


####################################################################################################
######################################## FULL NEW PROJECTS #########################################
####################################################################################################
function react_setup_for_newnode_project {
  npm install react redux react-redux react-dom --save
  npm install 
  newnode__babel_base "$1"

  cat > ./config/webpack/webpack.config.js <<- WEBPACKCONFIG
var config = {
  context: __dirname + "/BASE_DIRECTORY_FOR_RESOLVING_ENTRY",
  entry: "ENTRY_POINT_FOR_BUNDLE.js -- OR ['entry1.js', 'entry2.js']",
  output: {
    path: __dirname + "",
    filename: "INSERT_OUTPUT_FILE_NAME.js"
  },
  module : {
    loaders : [
      {
        test : /\.jsx?/,
        include : __dirname,
        loader : "babel"
      }
    ]
  }
}
module.exports = config;
WEBPACKCONFIG

    mkdir client
    mkdir server
}

function newnode_project {
    echo "Building new NodeJS project with name $1"
    mkdir $1
    cd $1
    npm init $1 -f
    git init
    npm install --save lodash jquery
    npm install --save fs-extra
    npm install --save moment
    npm install --save-dev gulp webpack gulp-webpack
    npm install --save-dev nodemon
    npm install --save-dev mocha
    npm install --save-dev gulp-mocha
    npm install --save-dev chai
    npm install --save-dev bower
    npm install --save-dev eslint babel-eslint
    npm install --save-dev eslint-plugin-react

    newnode__babel_config_base

    touch Gulpfile

    newnode__webpack "$1"

    touch app.js
    echo "var _ = require('lodash');" > app.js

    echo `node -v` > .node-version

    if [[ -n $2 ]]; then
        if [[ $2 -eq "react" ]]; then
            react_setup_for_newnode_project
        fi
        if [[ $2 -eq "express" ]]; then
            npm install --save express
        fi
    fi
    if [[ -n $3 ]]; then
        if [[ $3 -eq "react" ]]; then
            react_setup_for_newnode_project
        fi
        if [[ $3 -eq "express" ]]; then
            npm install --save express
        fi
    fi

    echo "**/node_modules/**" > .gitignore

    mkdir config
    mkdir scripts
    mkdir bin
    mkdir data
    mkdir data/migrations
    mkdir doc
    
    newnode__mocha_base_install_in_proj 
    newnode__postgres_base_install_in_proj "$1"

    if [[ `redis-cli ping` == "PONG" ]]; then echo "Redis running, ready for use in project"; fi

    newnode_default_eslint

    newnode_sublime_project_base
    open_in_sublime "$1.sublime-project"

    echo "** New NodeJS project created!"
}

# CREATE BASIC NODE PROJECT
function newnode__ultra_basic {
    mkdir "$1"
    cd "$1"

    # BASIC FILES
    newnode__default_eslint "$1"
    newnode__sublime_project_base "$1"
    newnode__postgres_base_install_in_proj "$1"
    newnode__babel_config_base "$1"

    # INITIALIZE PROJECT
    git init
    npm init "$1" -f

    # NPM SETUP
    npm install --save lodash jquery
    npm install --save fs-extra
    npm install --save moment
    npm install --save-dev gulp webpack gulp-webpack
    npm install --save-dev bower
    npm install --save-dev nodemon
    npm install --save-dev eslint babel-eslint
    npm install --save-dev eslint-plugin-react

    # CREATE DIRECTORY STRUCTURE
    mkdir app
    mkdir "test"
    mkdir scripts
    touch app.js
}


function newnode_basic_libs {
    npm init "$1" -f
    npm install --save lodash jquery moment
    npm install --save-dev webpack bower nodemon eslint babel-eslint
}

########### REACT ###########
function newnode_react_comprehensive {
    mkdir "$1"
    cd "$1"
    newnode__sublime_project_base "$1"
    newnode__default_eslint "$1"
    newnode__postgres_base_install_in_proj "$1"
    newnode__babel_base "$1"
    newnode__webpack "$1"
    newnode_basic_libs "$1"

    npm install --save react react-dom  
    npm install --save classnames
    npm install --save-dev typescript typings tslint-fix ts-loader
    npm install --save-dev handlebars handlebars-webpack-plugin handlebars-loader
    npm install --save-dev webpack 
    npm install --save-dev
    npm install --save-dev json-loader 
    npm install --save-dev style-loader css-loader scss-loader
    npm install --save-dev eslint-plugin-react react-hot-loader 
    npm install --save-dev enzyme react-addons-test-utils
    mkdir app
    mkdir doc
    mkdir scripts
    mkdir config
}


function newnode_create_empty_config {
    mkdir config
    cat > config/config.js <<-CONFIG_FILE
/**************************************************************************************************
*
*            Application configuration, e.g. server ports, db names
*
*/

module.exports = {
};

CONFIG_FILE
    echo "Base configuration file created"
}

############################################ TYPESCRIPT ############################################
function type_react_new_component {
    mkdir app/components/$1
    touch app/components/$1/$1.css
cat > app/components/$1/$1.tsx <<-TYPESCRIPT 
/// <reference path="../../../typings/index.d.ts" />

declare function require(name: string);

import * as _ from 'lodash';
import * as React from 'react';
import * as ReactDOM from 'react-dom';

require('./$1.css');

interface $1Props { };
interface $1State { };

export class $1 extends React.Component<$1Props, $1State> {
  render() {
    return (
      <div>$1</div>
    );
  }
};
TYPESCRIPT
}

source "$SNIPPETS_DIR/scripts/sh/project-generators/starterpack_node_webpack_babel_ts.sh"

echo "Project generation scripts loaded!"
