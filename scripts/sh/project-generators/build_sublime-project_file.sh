alias current_directory="pwd | rev | cut -d'/' -f1 | rev"

#=== FUNCTION ==========================================================
#        NAME:  build_gitignore_file
# DESCRIPTION:  Create boilerplate .gitignore file for a new project
#=======================================================================
function build_gitignore_file() {
    local GITIGNORE_FILE=$(echo "$PWD/.gitignore")

    ############ START HEREDOC ############
cat << GITIGNORE_FILE_HEREDOC > "$GITIGNORE_FILE"
.DS_Store
dump.rdb

# Local environment variables
.env

# Logs
logs
*.log
npm-debug.log*
yarn-error.log
logfile
log/

# Runtime data
pids
*.pid
*.seed
db/postgres/

# Build output
build/**

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# IDE files
*.sublime-workspace
*.sublime-project
.vscode

# IDE history storage
.history/**

# vim swapfile
*.swp

# Anything with the _OLD file suffix
**/doc/**_OLD/**
**/*_OLD/

# Personal 'recycle bin' for code
**/doc/old_code/**
doc/old_code

# Local notes (e.g. TODO lists)
doc/local_notes

## Temporary files & folders ##
temp/
temp/**
!/*/**/*temp*
**/cache/**
.awcache

# Optional npm cache directories
.npm
.npmrc

# Backups
.bk

# REPL history files
.node_history
.node_repl_history
repl-history

GITIGNORE_FILE_HEREDOC
    ############ END HEREDOC ############

    echo "Created $GITIGNORE_FILE"
}

#=== FUNCTION ==========================================================
#        NAME:  build_editorconfig_file
# DESCRIPTION:  Create a .editorconfig file for EditorConfig tool
#=======================================================================
function build_editorconfig_file() {
    local EDITORCONFIG_FILE=$(echo "$PWD/.editorconfig")

    ############ START HEREDOC ############
cat << EDITORCONFIG_FILE_HEREDOC > "$EDITORCONFIG_FILE"
root = true

[*]
insert_final_newline = true
indent_style = space
indent_size = 4
charset = utf-8
tab_width = 1
end_of_line = lf
trim_trailing_whitespace = true

[*.{rb,erb}]
indent_size = 2

EDITORCONFIG_FILE_HEREDOC
    ############ END HEREDOC ############

    echo "Created $EDITORCONFIG_FILE"
}

#=== FUNCTION ==========================================================
#        NAME:  build_sublime_project_file
# DESCRIPTION:  Construct a new {project_name}.sublime-snippet file
#   @PARAM $1:  project name. Defaults to name of current directory.
#=======================================================================
function build_sublime_project_file() {
    local SUBLIME_PROJ_FILE=$([ ! -z "${1// }" ] && echo "$PWD/$1.sublime-project" || \
                              echo "$PWD/$(current_directory).sublime-project")
    local HOME_DIR="$(echo ~)"

    ############ START HEREDOC ############
cat << SUBLIME_PROJECT_FILE > "$SUBLIME_PROJ_FILE"
{
    "folders":
    [
        {
            "path": ".",
            "folder_exclude_patterns": ["node_modules"]
        },
        {
            "path": "$HOME_DIR/Library/Application Support/Sublime Text 3/Packages/User/snippets",
            "folder_exclude_patterns": ["node_modules"]
        },
        {
            "path": "$HOME_DIR/projects/new_node_modules/mad-logs",
            "folder_exclude_patterns": ["node_modules"]
        },
        {
            "path": "$HOME_DIR/projects/new_node_modules/mad-utils",
            "folder_exclude_patterns": ["node_modules"]
        }
    ]
}
SUBLIME_PROJECT_FILE
    ############ END HEREDOC ############

    echo "Created $SUBLIME_PROJ_FILE"

    # Initialize EditorConfig configuration file
    build_editorconfig_file

    # Initialize git
    build_gitignore_file
    git init
    git add --all
    git commit --all -m "First commit. Create .gitignore & .editorconfig"
}

alias newnode__sublime_project_base=build_sublime_project_file
alias new_sublime_project_base=build_sublime_project_file
