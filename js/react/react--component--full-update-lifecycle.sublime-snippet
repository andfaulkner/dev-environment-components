<snippet>
    <content><![CDATA[
    var ${1:__ComponentWithFullUpdateLifecycle__} = React.createClass({

        //Sets up the initial state of the component - e.g. the initial variables' values
        getInitialState: function(){
            return { ${3:__someVar__}: ${4:__someVal__} };
        },

        // Run on component update; i.e. when this.update is called in 'this.render' below
        update: function() {
            ${6:__e.g.--this.setProps({val: this.props.val+1\});__}
        },

        //Takes in our next props - sets the value accessible by all followings parts of lifecycle
        componentWillReceiveProps: function(nextProps){
            this.setState({ ${3:__someVar__}: ${5:__someNewValOrModifiedExistingOne__} });
        },

        //[2] Mount component
        render: function() {
            return (
                ${2:__actualComponentHere...e.g.
                <button onClick={this.update\}>
                    Button text - or e.g.--{this.props.val\}
                </button>__}
            );
        },

        //Only update component if this returns true
        //nextProps & nextState: post-update component properties & state, respectively
        shouldComponentUpdate: function(nextProps, nextState) {
            return ${7:__somethingResultingInTrueOrFalse__};
        },

        //Do something after component update complete
        //prevProps & prevState: pre-update component properties & state, respectively
        componentDidUpdate: function(prevProps, prevState) {
            ${8:__actionToPerformAfterComponentUpdates__};
        }
    });

    React.render(<${1:__ComponentWithFullUpdateLifecycle__} />, ${9:__domNodeToAttachTo});

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>rc_fullupdatelifecycle</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>