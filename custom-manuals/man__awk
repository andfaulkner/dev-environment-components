#!/usr/bin/env sh

cat <<-'TERMINAL_MANUAL_QUICK_REF'

---------------------------------------------------------------------------------
** AWK - COMMON USE **
---------------------------------------------------------------------------------
# PRINT COLUMNS
- Print 2nd-last column:                    awk '{print \$(NF-1)}'

# PRINT ROWS
- Print last line of file                   awk 'END{print}'
- Print first line of file                  awk 'NR>1{exit};1'
- Print first 11 lines of file              awk 'NR < 11'
- Print last 2 lines of file                awk '{y=x "\n" $0; x=$0};END{print y}'

# SPLIT
- Split into columns based on a delimiter   awk -F'/' '{print \$(NF)}'
  -- (delimiter is '/' in the example)

# MULTILINE SEARCH
- match from 1st occurrence of matcher1, to 1st occurrence of matcher2
      awk '/matcher1/,/matcher2/' some_file
    -- this also works if you pipe values in, you don\'t need to use some_file
- Return section of file from match to end of file
      awk '/matcher_here/,EOF'

# MATCH LINES
- Return all lines matching a regex
      awk '/matcher1/'
- Return all lines *NOT* matching a regex
      awk '!/matcher1/'
- Print line immediately after match but not the line itself
      awk '/regex/{getline;print}'

# FIELDS
- Get number of fields in a row               NF
- Fields are divided by the field separator
  -- a space by default
- Print all fields in a line                  print $0
- Print a specific field, by number           print $1

# FIELD MATCHING
- Print lines based on matching fields. Examples:
  -- Print lines where field 5 matches "abc123"          awk '$5 == "abc123"'
  -- Print lines where field 5 does NOT match "abc123"   awk '$5 != "abc123"'
      * (also prints lines with less than 5 fields)
  -- Print line if field 7 matches the regex             awk '$7  ~ /^[a-f]/'
  -- Print line if field 7 DOES NOT match the regex      awk '$7  !~ /^[a-f]/'

# FIELD MODIFICATION
- Switch the first 2 fields of every line                awk '{temp = $1; $1 = $2; $2 = temp}' some_file

# MODIFY FILES (note: you need to write back into the file for this to work)
- Replace all instances of 'err' with 'poo' in test.js   awk '{gsub(/err/,"poo")}; 1' test.js
- Replace instances of matcher with value in test.js if:
  -  the line also contains "baz":                       awk '/baz/{gsub(/matcher/, "value")}; 1' test.js
  -  the line DOES NOT contains "baz":                   awk '/baz/{gsub(/matcher/, "value")}; 1' test.js
  -  only if the line 
- Replace all instance of any of "scarlet" or "ruby" or "puce" to "red":
  awk '{gsub(/scarlet|ruby|puce/, "red")}; 1'

# DELETING LINES
- Delete ALL blank lines from a file                     awk NF
- Remove duplicate, consecutive lines of file            awk 'a !~ $0; {a=$0}'
- Remove duplicate, non-consecutive lines of file        awk '!($0 in a){a[$0];print}'
---------------------------------------------------------------------------------

# See http://www.pement.org/awk/awk1line.txt

TERMINAL_MANUAL_QUICK_REF
